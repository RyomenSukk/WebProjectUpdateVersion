/* eslint-disable @next/next/no-img-element */
/* eslint-disable react/no-unescaped-entities */
import { useEffect, useState } from "react";

export default function Home() {
  const [songs, setSongs] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [activeVideo, setActiveVideo] = useState(null);
  const [playlist, setPlaylist] = useState([]);
  const [showPlaylist, setShowPlaylist] = useState(false);
  const [playingFromPlaylist, setPlayingFromPlaylist] = useState(false);
  const [currentPlaylistIndex, setCurrentPlaylistIndex] = useState(-1);

  useEffect(() => {
    const fetchSongs = async () => {
      setLoading(true);
      try {
        const res = await fetch("/api/songs");
        if (!res.ok) {
          throw new Error("Failed to fetch songs");
        }
        const data = await res.json();
        setSongs(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const savedPlaylist = localStorage.getItem("musicPlaylist");
    if (savedPlaylist) {
      try {
        setPlaylist(JSON.parse(savedPlaylist));
      } catch (e) {
        console.error("Error loading saved playlist", e);
      }
    }

    fetchSongs();
  }, []);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏•‡∏á‡πÉ‡∏ô localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    if (playlist.length > 0) {
      localStorage.setItem("musicPlaylist", JSON.stringify(playlist));
    }
  }, [playlist]);

  // Extract YouTube ID from a full URL
  const getYoutubeId = (url) => {
    if (!url) return null;

    // If it's already just an ID
    if (!url.includes("http") && url.length > 5) {
      return url;
    }

    try {
      const urlObj = new URL(url);
      if (urlObj.hostname.includes("youtube.com")) {
        return urlObj.searchParams.get("v");
      } else if (urlObj.hostname.includes("youtu.be")) {
        return urlObj.pathname.substring(1);
      }
    } catch (e) {
      return null;
    }

    return null;
  };

  const getThumbnailUrl = (youtubeId) => {
    if (!youtubeId) return "/api/placeholder/320/180";
    return `https://img.youtube.com/vi/${youtubeId}/mqdefault.jpg`;
  };

  const playSong = (youtubeUrl) => {
    const youtubeId = getYoutubeId(youtubeUrl);
    if (youtubeId) {
      setActiveVideo(youtubeId);
      setPlayingFromPlaylist(false);
      setCurrentPlaylistIndex(-1);
    } else {
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ");
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
  const getActiveSong = () => {
    if (!activeVideo || (!Array.isArray(songs) && !playlist.length)) return null;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô
    if (Array.isArray(songs)) {
      const fromSongs = songs.find(song => getYoutubeId(song.youtube_url) === activeVideo);
      if (fromSongs) return fromSongs;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
    return playlist.find(song => getYoutubeId(song.youtube_url) === activeVideo);
  };

  const activeSong = getActiveSong();

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
  const addToPlaylist = (song) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const songExists = playlist.some(
      item => getYoutubeId(item.youtube_url) === getYoutubeId(song.youtube_url)
    );

    if (!songExists) {
      const newPlaylist = [...playlist, song];
      setPlaylist(newPlaylist);
      alert(`‡πÄ‡∏û‡∏¥‡πà‡∏° "${song.title}" ‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß`);
    } else {
      alert("‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß");
    }
  };

  // ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
  const removeFromPlaylist = (index) => {
    const newPlaylist = [...playlist];
    newPlaylist.splice(index, 1);
    setPlaylist(newPlaylist);

    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà
    if (playingFromPlaylist && index === currentPlaylistIndex) {
      if (newPlaylist.length > 0) {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        const nextIndex = index < newPlaylist.length ? index : 0;
        playPlaylistSong(nextIndex);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô
        setActiveVideo(null);
        setPlayingFromPlaylist(false);
        setCurrentPlaylistIndex(-1);
      }
    } else if (playingFromPlaylist && index < currentPlaylistIndex) {
      // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô ‡∏õ‡∏£‡∏±‡∏ö index
      setCurrentPlaylistIndex(currentPlaylistIndex - 1);
    }
  };

  // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const clearPlaylist = () => {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      setPlaylist([]);
      localStorage.removeItem("musicPlaylist");

      if (playingFromPlaylist) {
        setActiveVideo(null);
        setPlayingFromPlaylist(false);
        setCurrentPlaylistIndex(-1);
      }
    }
  };

  // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
  const playPlaylistSong = (index) => {
    if (index >= 0 && index < playlist.length) {
      const song = playlist[index];
      const youtubeId = getYoutubeId(song.youtube_url);
      if (youtubeId) {
        setActiveVideo(youtubeId);
        setPlayingFromPlaylist(true);
        setCurrentPlaylistIndex(index);
      }
    }
  };

  // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
  const playNextSong = () => {
    if (!playingFromPlaylist || playlist.length === 0) return;

    const nextIndex = (currentPlaylistIndex + 1) % playlist.length;
    playPlaylistSong(nextIndex);
  };

  // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
  const playPreviousSong = () => {
    if (!playingFromPlaylist || playlist.length === 0) return;

    const prevIndex = (currentPlaylistIndex - 1 + playlist.length) % playlist.length;
    playPlaylistSong(prevIndex);
  };

  // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  const shufflePlaylist = () => {
    if (playlist.length <= 1) {
      alert("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÄ‡∏û‡∏•‡∏á");
      return;
    }

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    let randomIndex;
    do {
      randomIndex = Math.floor(Math.random() * playlist.length);
    } while (randomIndex === currentPlaylistIndex && playlist.length > 1);

    playPlaylistSong(randomIndex);
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
  const handleVideoEnded = () => {
    if (playingFromPlaylist) {
      playNextSong();
    }
  };

  return (
    <div className="container">
      <div className="header-bar">
        <button onClick={() => window.location.href = "/login"} className="login-btn">
          üîê For Admin
        </button>
      </div>
      <h1>Music Chord</h1>

      {error && (
        <div className="error-message">
          <p>{error}</p>
        </div>
      )}

      {loading ? (
        <div className="loading-container">
          <div className="spinner"></div>
        </div>
      ) : (
        <>
          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå */}
          <div className="view-toggle">
            <button
              className={`toggle-btn ${!showPlaylist ? 'active' : ''}`}
              onClick={() => setShowPlaylist(false)}
            >
              ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
            <button
              className={`toggle-btn ${showPlaylist ? 'active' : ''}`}
              onClick={() => setShowPlaylist(true)}
            >
              ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô {playlist.length > 0 && `(${playlist.length})`}
            </button>
          </div>

          <div className="horizontal-layout">
            {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ */}
            <div className="main-player-area">
              {activeVideo ? (
                <div className="active-player">
                  <h2 className="now-playing">{activeSong?.title} - {activeSong?.artist}</h2>
                  <div className="video-wrapper">
                    <iframe
                      src={`https://www.youtube.com/embed/${activeVideo}?autoplay=1&rel=0`}
                      title="YouTube video player"
                      frameBorder="0"
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                      allowFullScreen
                      onEnded={handleVideoEnded}
                    ></iframe>
                  </div>
                  <div className="active-player-controls">
                    {playingFromPlaylist && (
                      <>
                        <button onClick={playPreviousSong} className="playlist-control-btn">
                          ‚èÆÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                        </button>
                        <button onClick={playNextSong} className="playlist-control-btn">
                          ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚è≠Ô∏è
                        </button>
                      </>
                    )}
                    <button onClick={() => setActiveVideo(null)}>
                      ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô
                    </button>
                    {playingFromPlaylist && (
                      <button onClick={shufflePlaylist} className="playlist-control-btn">
                        üîÄ ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á
                      </button>
                    )}
                    {activeSong?.chord_url && (
                      <button onClick={() => window.open(activeSong.chord_url, "_blank")}>
                        ‡∏î‡∏π‡∏Ñ‡∏≠‡∏£‡πå‡∏î
                      </button>
                    )}
                    {!playingFromPlaylist && activeSong && (
                      <button
                        onClick={() => addToPlaylist(activeSong)}
                        className="add-to-playlist-btn"
                      >
                        + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
                      </button>
                    )}
                  </div>
                </div>
              ) : (
                <div className="empty-player">
                  <p>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</p>
                </div>
              )}
            </div>

            {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ */}
            <div className="playlist-container">
              {showPlaylist ? (
                <>
                  <div className="playlist-header">
                    <h3 className="playlist-title">‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h3>
                    {playlist.length > 0 && (
                      <div className="playlist-actions">
                        <button
                          onClick={() => playPlaylistSong(0)}
                          className="play-all-btn"
                          disabled={playlist.length === 0}
                        >
                          ‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        </button>
                        <button
                          onClick={clearPlaylist}
                          className="clear-btn"
                          disabled={playlist.length === 0}
                        >
                          üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå
                        </button>
                      </div>
                    )}
                  </div>
                  <div className="song-list">
                    {playlist.length > 0 ? (
                      playlist.map((song, index) => {
                        const youtubeId = getYoutubeId(song.youtube_url);
                        const isActive = playingFromPlaylist && currentPlaylistIndex === index;

                        return (
                          <div
                            key={`playlist-${index}`}
                            className={`song-item playlist-item ${isActive ? 'active-song' : ''}`}
                          >
                            <div
                              className="song-content"
                              onClick={() => playPlaylistSong(index)}
                            >
                              <div className="song-thumbnail-small">
                                <img
                                  src={getThumbnailUrl(youtubeId)}
                                  alt={`${song.title} thumbnail`}
                                />
                                <div className="thumbnail-overlay">
                                  <div className="play-icon">
                                    <svg viewBox="0 0 24 24">
                                      <path d="M8 5v14l11-7z" />
                                    </svg>
                                  </div>
                                </div>
                              </div>
                              <div className="song-info">
                                <h4 className="song-title">{song.title}</h4>
                                <p className="song-artist">{song.artist}</p>
                              </div>
                            </div>
                            <div className="playlist-item-actions">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  removeFromPlaylist(index);
                                }}
                                className="remove-btn"
                                title="‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå"
                              >
                                ‚úï
                              </button>
                            </div>
                          </div>
                        );
                      })
                    ) : (
                      <div className="empty-playlist">
                        <p>‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</p>
                        <p>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå" ‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á</p>
                      </div>
                    )}
                  </div>
                </>
              ) : (
                <>
                  <h3 className="playlist-title">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
                  <div className="song-list">
                    {Array.isArray(songs) && songs.length > 0 ? (
                      songs.map((song) => {
                        const youtubeId = getYoutubeId(song.youtube_url);
                        const isActive = !playingFromPlaylist && activeVideo === youtubeId;

                        return (
                          <div
                            key={song.id}
                            className={`song-item ${isActive ? 'active-song' : ''}`}
                          >
                            <div
                              className="song-content"
                              onClick={() => playSong(song.youtube_url)}
                            >
                              <div className="song-thumbnail-small">
                                <img
                                  src={getThumbnailUrl(youtubeId)}
                                  alt={`${song.title} thumbnail`}
                                />
                                <div className="thumbnail-overlay">
                                  <div className="play-icon">
                                    <svg viewBox="0 0 24 24">
                                      <path d="M8 5v14l11-7z" />
                                    </svg>
                                  </div>
                                </div>
                              </div>
                              <div className="song-info">
                                <h4 className="song-title">{song.title}</h4>
                                <p className="song-artist">{song.artist}</p>
                              </div>
                            </div>
                            <div className="song-item-actions">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  addToPlaylist(song);
                                }}
                                className="add-btn"
                                title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå"
                              >
                                +
                              </button>
                            </div>
                          </div>
                        );
                      })
                    ) : (
                      <p className="no-songs">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                    )}
                  </div>
                </>
              )}
            </div>
          </div>
        </>
      )}
    </div>
  );
}